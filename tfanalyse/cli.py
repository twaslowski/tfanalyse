import json
import os
import subprocess

import click
from click import secho

from tfanalyse.change import Action, Change


@click.group()
def tfanalyse():
    """
    Analyse Terraform plan files.
    """


@click.command()
@click.argument("plan")
@click.option(
    "--print-plan", is_flag=True, default=False, help="Print the Terraform plan JSON."
)
def load(plan: str, print_plan: bool) -> dict:
    """
    Loads Terraform plan JSON into a Python dictionary.
    """
    _load(plan, print_plan)


@click.command()
@click.argument("plan")
@click.option("--show-no-op", is_flag=True, default=False, help="Show no-op changes.")
@click.option(
    "--delete-only", is_flag=True, default=False, help="Show only deletion changes."
)
def summarise(plan: str, show_no_op: bool, delete_only: bool) -> None:
    """
    Summarises Terraform plan changes.
    """
    parsed_plan = _load(plan, False)
    changes = _parse_changes(parsed_plan)
    for change in changes:
        if not show_no_op and change.action == Action.NOOP:
            continue
        if delete_only and change.action != Action.DELETE:
            continue
        secho(change.action.name, fg=change.action.value, nl=False)
        secho(f" {change.address}")


def _load(plan: str, print_plan: bool) -> dict:
    """
    Load a Terraform plan file into a Python dictionary.
    Optionally pretty-print plan JSON.
    :param plan: Path to plan file, likely generated by running `terraform plan -out=plan.tfplan`.
    :param print_plan: Whether or not to print the plan JSON.
    :return:
    """
    if not _check_exists(plan):
        secho(f"Plan file {plan} does not exist.", fg="red")
        return
    output = subprocess.run(
        ["terraform", "show", "-json", plan], check=True, capture_output=True
    )
    parsed_plan = json.loads(output.stdout)
    if print_plan:
        secho(json.dumps(parsed_plan, indent=2))
    return parsed_plan


def _parse_changes(parsed_plan: dict) -> list[Change]:
    """
    Parse Terraform plan changes to the dedicated dataclass.
    :param parsed_plan: The plan dictionary.
    :return: list of Change class instances.
    """
    return [Change.from_entry(entry) for entry in parsed_plan["resource_changes"]]


def _check_exists(path: str) -> bool:
    return os.path.exists(path)


tfanalyse.add_command(load)
tfanalyse.add_command(summarise)
